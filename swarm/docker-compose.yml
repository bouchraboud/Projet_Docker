version: '3.8'

services:
  nginx:
    image: nginx:latest
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
    ports:
      - "80:80"
    networks:
      - app_network
    depends_on:
      - frontend
      - backend
      - my_postgres

  frontend:
    image: localhost:5000/my-frontend-image
    deploy:
      replicas: 2
      resources:
        limits:
          cpus: '0.5'
          memory: 500M
      restart_policy:
        condition: on-failure
    networks:
      - app_network

  backend:
    image: localhost:5000/my-backend-image
    deploy:
      replicas: 2
      resources:
        limits:
          cpus: '0.5'
          memory: 500M
      restart_policy:
        condition: on-failure
    environment:
      DATABASE_URL: jdbc:postgresql://my_postgres:5432/mydatabase
    ports:
      - "8080:8080" 
    networks:
      - app_network

  my_postgres:
    image: localhost:5000/my_postgres
    deploy:
      replicas: 1
      resources:
        limits:
          cpus: '0.5'
          memory: 500M
      restart_policy:
        condition: on-failure
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: mydatabase
    ports:
      - "5432:5432"
    networks:
      - app_network
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "postgres", "-d", "mydatabase"]
      interval: 10s
      retries: 5
      start_period: 30s
      timeout: 5s

networks:
  app_network:
    driver: overlay  

volumes:
  postgres_data:
